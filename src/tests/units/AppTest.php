<?php
namespace Microsite\Tests;

use \Microsite\App;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-06 at 14:33:06.
 */
class AppTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var App
	 */
	protected $app;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		parent::setUp();

		ob_start();

		$this->app = new App;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		header_remove();
		parent::tearDown();
	}

	/**
	 * @covers Microsite\App::__construct
	 */
	public function testConstruct()
	{
		$app = new App();
		$this->assertInstanceOf('\Microsite\App', $app);

		$app->route('test', '/test', function($response) {
			$response['output'] = 'pass';
			return $response->render(function($vars) { return $vars['output']; });
		});

		$this->assertEquals('pass', $app->request('/test'));

	}

	/**
	 * @covers Microsite\App::route
	 */
	public function testRoute()
	{
		$this->app->route('name', '/test', function(){ return 'ok'; });

		$_SERVER['REQUEST_URI'] = '/test';
		$this->assertEquals('ok', $this->app->run());
	}

	/**
	 * @covers Microsite\App::__invoke
	 */
	public function testInvoke()
	{
		$this->app->route('name', '/test', function(){ return 'ok'; });

		$_SERVER['REQUEST_URI'] = '/test';
		$app = $this->app;
		$this->assertEquals('ok', $app());
	}

	/**
	 * @covers Microsite\App::get_route
	 */
	public function testGet_route()
	{
		$route = $this->app->route('named_route', '/test', function(){ return 'ok'; });

		$this->assertEquals($route, $this->app->get_route('named_route'));

	}

	/**
	 * @covers Microsite\App::run
	 */
	public function testRun()
	{
		$this->app->route('name', '/test', function(){ return 'ok'; });

		$_SERVER['REQUEST_URI'] = '/test';
		$this->assertEquals('ok', $this->app->run());
	}

	/**
	 * @covers Microsite\App::run
	 */
	public function testRun404()
	{
		$_SERVER['REQUEST_URI'] = '/404';
		$headers_list = array();
		$this->app->demand('header', function($header) use (&$headers_list) { $headers_list[] = $header; });
		$this->app->run();

		var_dump($headers_list);
		$this->assertNotEmpty($headers_list);
		$this->assertContains('HTTP/1.1 404 Not Found', $headers_list);
	}

	/**
	 * @covers Microsite\App::request
	 */
	public function testRequest()
	{
		$this->app->route('name', '/test', function(){ return 'ok'; });

		$this->app->request('/test');
		$this->assertEquals('ok', $this->app->run());
	}

	/**
	 * @covers Microsite\App::share
	 * @covers Microsite\App::__call
	 */
	public function testShare()
	{
		$this->app->share('obj', function($param) {
			$obj = new \stdClass();
			$obj->param = $param;
			return $obj;
		});

		$a = $this->app->obj('test');

		$this->assertEquals('test', $a->param);

		$b = $this->app->obj('fail');

		// Since this object is shared, the second creation call should do nothing,
		// and the value should be the same
		$this->assertEquals('test', $b->param);
	}

	/**
	 * @covers Microsite\App::demand
	 * @covers Microsite\App::__call
	 */
	public function testDemand()
	{
		$this->app->demand('obj', function($param) {
			$obj = new \stdClass();
			$obj->param = $param;
			return $obj;
		});

		$a = $this->app->obj('test');

		$this->assertEquals('test', $a->param);

		$b = $this->app->obj('pass');

		// Since this object is on demand, the second creation call should create a new object,
		// and the value should be different
		$this->assertEquals('pass', $b->param);
	}
}
